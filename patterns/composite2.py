#–†–µ–∞–ª–∏–∑—É–π —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∞–º–∏ –∏ —Ñ–∞–π–ª–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ö–æ–º–ø–æ–Ω–æ–≤—â–∏–∫.

#–ü–∞–ø–∫–∞ (Folder) –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–∞–π–ª—ã (File) –∏ –¥—Ä—É–≥–∏–µ –ø–∞–ø–∫–∏.

#–§–∞–π–ª (File) –∏–º–µ–µ—Ç –∏–º—è –∏ —Ä–∞–∑–º–µ—Ä (–≤ KB).

#–ú–µ—Ç–æ–¥ show(indent=0) –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏.

#–ú–µ—Ç–æ–¥ size() —É Folder –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
from abc import ABC, abstractmethod
from typing import List

class FolderOrFile(ABC):
    @abstractmethod
    def show(self, indent=0):
        pass
    
    @abstractmethod
    def size(self):
        pass

class Folder(FolderOrFile):
    def __init__(self, name: str):
        self.name = name
        self.children: List[FolderOrFile] = []

    def show(self, indent=0):
        print(f"{indent*'\t'} üìÇ {self.name}")
        for child in self.children:
            child.show(indent+1)

    def add(self, item: FolderOrFile):
        self.children.append(item)

    def size(self):
        return sum(map(lambda item: item.size(), self.children))
#        sum({item.size() for item in self.children})

class File(FolderOrFile):
    def __init__(self, name: str, size: int):
        self.name = name
        self._size = size

    def show(self, indent=0):
        print(f"{indent*'\t'} üìÑ {self.name} ({self.size()} KB)")

    def size(self):
        return self._size


root = Folder("Root")
docs = Folder("Documents")
pics = Folder("Pictures")

file1 = File("resume.pdf", 120)
file2 = File("photo.jpg", 2000)
file3 = File("notes.txt", 45)

docs.add(file1)
pics.add(file2)
root.add(docs)
root.add(pics)
root.add(file3)

root.show()
print(f"Total size: {root.size()} KB")
# Root
#    üìÇ Documents
#         resume.pdf (120 KB)
#    üìÇ Pictures
#        üìÑ photo.jpg (2000 KB)
#    üìÑ notes.txt (45 KB)
#Total size: 2165 KB








